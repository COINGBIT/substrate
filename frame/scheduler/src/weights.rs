// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_scheduler
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-12-20, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `bm3`, CPU: `Intel(R) Core(TM) i7-7700K CPU @ 4.20GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// /home/benchbot/cargo_target_dir/production/substrate
// benchmark
// pallet
// --steps=50
// --repeat=20
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --json-file=/var/lib/gitlab-runner/builds/zyw4fam_/0/parity/mirrors/substrate/.git/.artifacts/bench.json
// --pallet=pallet_scheduler
// --chain=dev
// --header=./HEADER-APACHE2
// --output=./frame/scheduler/src/weights.rs
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_scheduler.
pub trait WeightInfo {
	fn service_agendas_base() -> Weight;
	fn service_agenda_base(s: u32, ) -> Weight;
	fn service_task_base() -> Weight;
	fn service_task_fetched(s: u32, ) -> Weight;
	fn service_task_named() -> Weight;
	fn service_task_periodic() -> Weight;
	fn execute_dispatch_signed() -> Weight;
	fn execute_dispatch_unsigned() -> Weight;
	fn schedule(s: u32, ) -> Weight;
	fn cancel(s: u32, ) -> Weight;
	fn schedule_named(s: u32, ) -> Weight;
	fn cancel_named(s: u32, ) -> Weight;
}

/// Weights for pallet_scheduler using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: Scheduler IncompleteSince (r:1 w:1)
	/// Proof: Scheduler IncompleteSince (values: Some(1), size: Some(4), worst-case: 499)
	fn service_agendas_base() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `30`
		//  Estimated: `525`
		// Minimum execution time: 3_505 nanoseconds.
		Weight::from_parts(3_672_000, 525)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Scheduler Agenda (r:1 w:1)
	/// Proof: Scheduler Agenda (values: None, size: Some(107022), worst-case: 109497)
	/// The range of component `s` is `[0, 512]`.
	fn service_agenda_base(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `112 + s * (177 ±0)`
		//  Estimated: `2587 + s * (177 ±0)`
		// Minimum execution time: 3_133 nanoseconds.
		Weight::from_parts(7_446_105, 2587)
			// Standard Error: 690
			.saturating_add(Weight::from_ref_time(274_991).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_proof_size(177).saturating_mul(s.into()))
	}
	fn service_task_base() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 4_945 nanoseconds.
		Weight::from_ref_time(5_226_000)
	}
	/// Storage: Preimage PreimageFor (r:1 w:1)
	/// Proof: Preimage PreimageFor (values: None, size: Some(4194344), worst-case: 4196819)
	/// Storage: Preimage StatusFor (r:1 w:1)
	/// Proof: Preimage StatusFor (values: None, size: Some(91), worst-case: 2566)
	/// The range of component `s` is `[128, 4194304]`.
	fn service_task_fetched(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `211 + s * (1 ±0)`
		//  Estimated: `5161 + s * (1 ±0)`
		// Minimum execution time: 17_192 nanoseconds.
		Weight::from_parts(17_510_000, 5161)
			// Standard Error: 1
			.saturating_add(Weight::from_ref_time(1_138).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_proof_size(1).saturating_mul(s.into()))
	}
	/// Storage: Scheduler Lookup (r:0 w:1)
	/// Proof: Scheduler Lookup (values: None, size: Some(48), worst-case: 2523)
	fn service_task_named() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_631 nanoseconds.
		Weight::from_ref_time(6_887_000)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn service_task_periodic() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_037 nanoseconds.
		Weight::from_ref_time(5_504_000)
	}
	fn execute_dispatch_signed() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_328 nanoseconds.
		Weight::from_ref_time(2_406_000)
	}
	fn execute_dispatch_unsigned() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_190 nanoseconds.
		Weight::from_ref_time(2_443_000)
	}
	/// Storage: Scheduler Agenda (r:1 w:1)
	/// Proof: Scheduler Agenda (values: None, size: Some(107022), worst-case: 109497)
	/// The range of component `s` is `[0, 511]`.
	fn schedule(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `112 + s * (177 ±0)`
		//  Estimated: `2587 + s * (177 ±0)`
		// Minimum execution time: 11_977 nanoseconds.
		Weight::from_parts(15_773_564, 2587)
			// Standard Error: 703
			.saturating_add(Weight::from_ref_time(293_598).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_proof_size(177).saturating_mul(s.into()))
	}
	/// Storage: Scheduler Agenda (r:1 w:1)
	/// Proof: Scheduler Agenda (values: None, size: Some(107022), worst-case: 109497)
	/// Storage: Scheduler Lookup (r:0 w:1)
	/// Proof: Scheduler Lookup (values: None, size: Some(48), worst-case: 2523)
	/// The range of component `s` is `[1, 512]`.
	fn cancel(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `112 + s * (177 ±0)`
		//  Estimated: `2587 + s * (177 ±0)`
		// Minimum execution time: 13_493 nanoseconds.
		Weight::from_parts(16_014_004, 2587)
			// Standard Error: 673
			.saturating_add(Weight::from_ref_time(271_204).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_proof_size(177).saturating_mul(s.into()))
	}
	/// Storage: Scheduler Lookup (r:1 w:1)
	/// Proof: Scheduler Lookup (values: None, size: Some(48), worst-case: 2523)
	/// Storage: Scheduler Agenda (r:1 w:1)
	/// Proof: Scheduler Agenda (values: None, size: Some(107022), worst-case: 109497)
	/// The range of component `s` is `[0, 511]`.
	fn schedule_named(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `627 + s * (178 ±0)`
		//  Estimated: `5577 + s * (178 ±0)`
		// Minimum execution time: 14_841 nanoseconds.
		Weight::from_parts(20_385_701, 5577)
			// Standard Error: 699
			.saturating_add(Weight::from_ref_time(297_323).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_proof_size(178).saturating_mul(s.into()))
	}
	/// Storage: Scheduler Lookup (r:1 w:1)
	/// Proof: Scheduler Lookup (values: None, size: Some(48), worst-case: 2523)
	/// Storage: Scheduler Agenda (r:1 w:1)
	/// Proof: Scheduler Agenda (values: None, size: Some(107022), worst-case: 109497)
	/// The range of component `s` is `[1, 512]`.
	fn cancel_named(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `740 + s * (177 ±0)`
		//  Estimated: `5690 + s * (177 ±0)`
		// Minimum execution time: 15_140 nanoseconds.
		Weight::from_parts(18_536_022, 5690)
			// Standard Error: 701
			.saturating_add(Weight::from_ref_time(278_741).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_proof_size(177).saturating_mul(s.into()))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: Scheduler IncompleteSince (r:1 w:1)
	/// Proof: Scheduler IncompleteSince (values: Some(1), size: Some(4), worst-case: 499)
	fn service_agendas_base() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `30`
		//  Estimated: `525`
		// Minimum execution time: 3_505 nanoseconds.
		Weight::from_parts(3_672_000, 525)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Scheduler Agenda (r:1 w:1)
	/// Proof: Scheduler Agenda (values: None, size: Some(107022), worst-case: 109497)
	/// The range of component `s` is `[0, 512]`.
	fn service_agenda_base(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `112 + s * (177 ±0)`
		//  Estimated: `2587 + s * (177 ±0)`
		// Minimum execution time: 3_133 nanoseconds.
		Weight::from_parts(7_446_105, 2587)
			// Standard Error: 690
			.saturating_add(Weight::from_ref_time(274_991).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_proof_size(177).saturating_mul(s.into()))
	}
	fn service_task_base() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 4_945 nanoseconds.
		Weight::from_ref_time(5_226_000)
	}
	/// Storage: Preimage PreimageFor (r:1 w:1)
	/// Proof: Preimage PreimageFor (values: None, size: Some(4194344), worst-case: 4196819)
	/// Storage: Preimage StatusFor (r:1 w:1)
	/// Proof: Preimage StatusFor (values: None, size: Some(91), worst-case: 2566)
	/// The range of component `s` is `[128, 4194304]`.
	fn service_task_fetched(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `211 + s * (1 ±0)`
		//  Estimated: `5161 + s * (1 ±0)`
		// Minimum execution time: 17_192 nanoseconds.
		Weight::from_parts(17_510_000, 5161)
			// Standard Error: 1
			.saturating_add(Weight::from_ref_time(1_138).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_proof_size(1).saturating_mul(s.into()))
	}
	/// Storage: Scheduler Lookup (r:0 w:1)
	/// Proof: Scheduler Lookup (values: None, size: Some(48), worst-case: 2523)
	fn service_task_named() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_631 nanoseconds.
		Weight::from_ref_time(6_887_000)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	fn service_task_periodic() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_037 nanoseconds.
		Weight::from_ref_time(5_504_000)
	}
	fn execute_dispatch_signed() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_328 nanoseconds.
		Weight::from_ref_time(2_406_000)
	}
	fn execute_dispatch_unsigned() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_190 nanoseconds.
		Weight::from_ref_time(2_443_000)
	}
	/// Storage: Scheduler Agenda (r:1 w:1)
	/// Proof: Scheduler Agenda (values: None, size: Some(107022), worst-case: 109497)
	/// The range of component `s` is `[0, 511]`.
	fn schedule(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `112 + s * (177 ±0)`
		//  Estimated: `2587 + s * (177 ±0)`
		// Minimum execution time: 11_977 nanoseconds.
		Weight::from_parts(15_773_564, 2587)
			// Standard Error: 703
			.saturating_add(Weight::from_ref_time(293_598).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_proof_size(177).saturating_mul(s.into()))
	}
	/// Storage: Scheduler Agenda (r:1 w:1)
	/// Proof: Scheduler Agenda (values: None, size: Some(107022), worst-case: 109497)
	/// Storage: Scheduler Lookup (r:0 w:1)
	/// Proof: Scheduler Lookup (values: None, size: Some(48), worst-case: 2523)
	/// The range of component `s` is `[1, 512]`.
	fn cancel(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `112 + s * (177 ±0)`
		//  Estimated: `2587 + s * (177 ±0)`
		// Minimum execution time: 13_493 nanoseconds.
		Weight::from_parts(16_014_004, 2587)
			// Standard Error: 673
			.saturating_add(Weight::from_ref_time(271_204).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_proof_size(177).saturating_mul(s.into()))
	}
	/// Storage: Scheduler Lookup (r:1 w:1)
	/// Proof: Scheduler Lookup (values: None, size: Some(48), worst-case: 2523)
	/// Storage: Scheduler Agenda (r:1 w:1)
	/// Proof: Scheduler Agenda (values: None, size: Some(107022), worst-case: 109497)
	/// The range of component `s` is `[0, 511]`.
	fn schedule_named(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `627 + s * (178 ±0)`
		//  Estimated: `5577 + s * (178 ±0)`
		// Minimum execution time: 14_841 nanoseconds.
		Weight::from_parts(20_385_701, 5577)
			// Standard Error: 699
			.saturating_add(Weight::from_ref_time(297_323).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_proof_size(178).saturating_mul(s.into()))
	}
	/// Storage: Scheduler Lookup (r:1 w:1)
	/// Proof: Scheduler Lookup (values: None, size: Some(48), worst-case: 2523)
	/// Storage: Scheduler Agenda (r:1 w:1)
	/// Proof: Scheduler Agenda (values: None, size: Some(107022), worst-case: 109497)
	/// The range of component `s` is `[1, 512]`.
	fn cancel_named(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `740 + s * (177 ±0)`
		//  Estimated: `5690 + s * (177 ±0)`
		// Minimum execution time: 15_140 nanoseconds.
		Weight::from_parts(18_536_022, 5690)
			// Standard Error: 701
			.saturating_add(Weight::from_ref_time(278_741).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_proof_size(177).saturating_mul(s.into()))
	}
}
