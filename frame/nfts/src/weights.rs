// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_nfts
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-11-25, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `bm3`, CPU: `Intel(R) Core(TM) i7-7700K CPU @ 4.20GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// /home/benchbot/cargo_target_dir/production/substrate
// benchmark
// pallet
// --steps=50
// --repeat=20
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --json-file=/var/lib/gitlab-runner/builds/zyw4fam_/0/parity/mirrors/substrate/.git/.artifacts/bench.json
// --pallet=pallet_nfts
// --chain=dev
// --header=./HEADER-APACHE2
// --output=./frame/nfts/src/weights.rs
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_nfts.
pub trait WeightInfo {
	fn create() -> Weight;
	fn force_create() -> Weight;
	fn destroy(n: u32, m: u32, a: u32, ) -> Weight;
	fn mint() -> Weight;
	fn force_mint() -> Weight;
	fn burn() -> Weight;
	fn transfer() -> Weight;
	fn redeposit(i: u32, ) -> Weight;
	fn lock_item_transfer() -> Weight;
	fn unlock_item_transfer() -> Weight;
	fn lock_collection() -> Weight;
	fn transfer_ownership() -> Weight;
	fn set_team() -> Weight;
	fn force_collection_owner() -> Weight;
	fn force_collection_config() -> Weight;
	fn lock_item_properties() -> Weight;
	fn set_attribute() -> Weight;
	fn force_set_attribute() -> Weight;
	fn clear_attribute() -> Weight;
	fn approve_item_attributes() -> Weight;
	fn cancel_item_attributes_approval(n: u32, ) -> Weight;
	fn set_metadata() -> Weight;
	fn clear_metadata() -> Weight;
	fn set_collection_metadata() -> Weight;
	fn clear_collection_metadata() -> Weight;
	fn approve_transfer() -> Weight;
	fn cancel_approval() -> Weight;
	fn clear_all_transfer_approvals() -> Weight;
	fn set_accept_ownership() -> Weight;
	fn set_collection_max_supply() -> Weight;
	fn update_mint_settings() -> Weight;
	fn set_price() -> Weight;
	fn buy_item() -> Weight;
	fn pay_tips(n: u32, ) -> Weight;
	fn create_swap() -> Weight;
	fn cancel_swap() -> Weight;
	fn claim_swap() -> Weight;
}

/// Weights for pallet_nfts using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Nfts NextCollectionId (r:1 w:1)
	// Storage: Nfts Collection (r:1 w:1)
	// Storage: Nfts CollectionRoleOf (r:0 w:1)
	// Storage: Nfts CollectionConfigOf (r:0 w:1)
	// Storage: Nfts CollectionAccount (r:0 w:1)
	fn create() -> Weight {
		// Minimum execution time: 42_075 nanoseconds.
		Weight::from_ref_time(42_614_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	// Storage: Nfts NextCollectionId (r:1 w:1)
	// Storage: Nfts Collection (r:1 w:1)
	// Storage: Nfts CollectionRoleOf (r:0 w:1)
	// Storage: Nfts CollectionConfigOf (r:0 w:1)
	// Storage: Nfts CollectionAccount (r:0 w:1)
	fn force_create() -> Weight {
		// Minimum execution time: 29_799 nanoseconds.
		Weight::from_ref_time(30_511_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	// Storage: Nfts Collection (r:1 w:1)
	// Storage: Nfts Item (r:1 w:0)
	// Storage: Nfts Attribute (r:1 w:0)
	// Storage: Nfts CollectionRoleOf (r:0 w:1)
	// Storage: Nfts CollectionMetadataOf (r:0 w:1)
	// Storage: Nfts CollectionConfigOf (r:0 w:1)
	// Storage: Nfts CollectionAccount (r:0 w:1)
	// Storage: Nfts ItemMetadataOf (r:0 w:20)
	// Storage: Nfts ItemConfigOf (r:0 w:20)
	// Storage: Nfts Account (r:0 w:20)
	/// The range of component `n` is `[0, 1000]`.
	/// The range of component `m` is `[0, 1000]`.
	/// The range of component `a` is `[0, 1000]`.
	fn destroy(n: u32, m: u32, a: u32, ) -> Weight {
		// Minimum execution time: 65_846 nanoseconds.
		Weight::from_ref_time(66_082_000)
			// Standard Error: 27_878
			.saturating_add(Weight::from_ref_time(26_747_590).saturating_mul(n.into()))
			// Standard Error: 27_329
			.saturating_add(Weight::from_ref_time(315_839 as u64).saturating_mul(m.into()))
			// Standard Error: 27_329
			.saturating_add(Weight::from_ref_time(217_497 as u64).saturating_mul(a.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes(5))
			.saturating_add(T::DbWeight::get().writes((5_u64).saturating_mul(n.into())))
	}
	// Storage: Nfts CollectionConfigOf (r:1 w:0)
	// Storage: Nfts Item (r:1 w:1)
	// Storage: Nfts Collection (r:1 w:1)
	// Storage: Nfts CollectionRoleOf (r:1 w:0)
	// Storage: Nfts ItemConfigOf (r:1 w:1)
	// Storage: Nfts Account (r:0 w:1)
	fn mint() -> Weight {
		// Minimum execution time: 58_577 nanoseconds.
		Weight::from_ref_time(59_058_000)
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	// Storage: Nfts CollectionRoleOf (r:1 w:0)
	// Storage: Nfts Item (r:1 w:1)
	// Storage: Nfts Collection (r:1 w:1)
	// Storage: Nfts CollectionConfigOf (r:1 w:0)
	// Storage: Nfts ItemConfigOf (r:1 w:1)
	// Storage: Nfts Account (r:0 w:1)
	fn force_mint() -> Weight {
		// Minimum execution time: 56_494 nanoseconds.
		Weight::from_ref_time(57_565_000)
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	// Storage: Nfts Collection (r:1 w:1)
	// Storage: Nfts Item (r:1 w:1)
	// Storage: Nfts CollectionRoleOf (r:1 w:0)
	// Storage: Nfts ItemConfigOf (r:1 w:1)
	// Storage: Nfts Account (r:0 w:1)
	// Storage: Nfts ItemPriceOf (r:0 w:1)
	// Storage: Nfts ItemAttributesApprovalsOf (r:0 w:1)
	// Storage: Nfts PendingSwapOf (r:0 w:1)
	fn burn() -> Weight {
		// Minimum execution time: 59_393 nanoseconds.
		Weight::from_ref_time(60_562_000)
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(7))
	}
	// Storage: Nfts Collection (r:1 w:0)
	// Storage: Nfts CollectionConfigOf (r:1 w:0)
	// Storage: Nfts ItemConfigOf (r:1 w:0)
	// Storage: Nfts Item (r:1 w:1)
	// Storage: Nfts CollectionRoleOf (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: Nfts Account (r:0 w:2)
	// Storage: Nfts ItemPriceOf (r:0 w:1)
	// Storage: Nfts PendingSwapOf (r:0 w:1)
	fn transfer() -> Weight {
		// Minimum execution time: 65_852 nanoseconds.
		Weight::from_ref_time(66_308_000)
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	// Storage: Nfts Collection (r:1 w:0)
	// Storage: Nfts CollectionConfigOf (r:1 w:0)
	// Storage: Nfts Item (r:102 w:102)
	/// The range of component `i` is `[0, 5000]`.
	fn redeposit(i: u32, ) -> Weight {
		// Minimum execution time: 25_795 nanoseconds.
		Weight::from_ref_time(26_128_000)
			// Standard Error: 10_295
			.saturating_add(Weight::from_ref_time(11_202_286).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(i.into())))
	}
	// Storage: Nfts CollectionRoleOf (r:1 w:0)
	// Storage: Nfts ItemConfigOf (r:1 w:1)
	fn lock_item_transfer() -> Weight {
		// Minimum execution time: 29_090 nanoseconds.
		Weight::from_ref_time(29_772_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Nfts CollectionRoleOf (r:1 w:0)
	// Storage: Nfts ItemConfigOf (r:1 w:1)
	fn unlock_item_transfer() -> Weight {
		// Minimum execution time: 28_947 nanoseconds.
		Weight::from_ref_time(29_559_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Nfts CollectionRoleOf (r:1 w:0)
	// Storage: Nfts CollectionConfigOf (r:1 w:1)
	fn lock_collection() -> Weight {
		// Minimum execution time: 26_972 nanoseconds.
		Weight::from_ref_time(27_803_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Nfts OwnershipAcceptance (r:1 w:1)
	// Storage: Nfts Collection (r:1 w:1)
	// Storage: Nfts CollectionAccount (r:0 w:2)
	fn transfer_ownership() -> Weight {
		// Minimum execution time: 32_165 nanoseconds.
		Weight::from_ref_time(32_926_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	// Storage: Nfts Collection (r:1 w:1)
	// Storage: Nfts CollectionRoleOf (r:0 w:4)
	fn set_team() -> Weight {
		// Minimum execution time: 35_375 nanoseconds.
		Weight::from_ref_time(35_950_000)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	// Storage: Nfts Collection (r:1 w:1)
	// Storage: Nfts CollectionAccount (r:0 w:2)
	fn force_collection_owner() -> Weight {
		// Minimum execution time: 27_470 nanoseconds.
		Weight::from_ref_time(27_855_000)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: Nfts Collection (r:1 w:0)
	// Storage: Nfts CollectionConfigOf (r:0 w:1)
	fn force_collection_config() -> Weight {
		// Minimum execution time: 23_990 nanoseconds.
		Weight::from_ref_time(24_347_000)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Nfts Collection (r:1 w:0)
	// Storage: Nfts ItemConfigOf (r:1 w:1)
	fn lock_item_properties() -> Weight {
		// Minimum execution time: 28_481 nanoseconds.
		Weight::from_ref_time(28_929_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Nfts Collection (r:1 w:1)
	// Storage: Nfts CollectionConfigOf (r:1 w:0)
	// Storage: Nfts ItemConfigOf (r:1 w:0)
	// Storage: Nfts Attribute (r:1 w:1)
	fn set_attribute() -> Weight {
		// Minimum execution time: 54_435 nanoseconds.
		Weight::from_ref_time(55_237_000)
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: Nfts Collection (r:1 w:1)
	// Storage: Nfts Attribute (r:1 w:1)
	fn force_set_attribute() -> Weight {
		// Minimum execution time: 35_254 nanoseconds.
		Weight::from_ref_time(35_941_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: Nfts Attribute (r:1 w:1)
	// Storage: Nfts Collection (r:1 w:1)
	// Storage: Nfts ItemConfigOf (r:1 w:0)
	fn clear_attribute() -> Weight {
		// Minimum execution time: 51_483 nanoseconds.
		Weight::from_ref_time(52_915_000)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: Nfts Item (r:1 w:0)
	// Storage: Nfts ItemAttributesApprovalsOf (r:1 w:1)
	fn approve_item_attributes() -> Weight {
		// Minimum execution time: 27_929 nanoseconds.
		Weight::from_ref_time(28_329_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Nfts Item (r:1 w:0)
	// Storage: Nfts ItemAttributesApprovalsOf (r:1 w:1)
	// Storage: Nfts Attribute (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	/// The range of component `n` is `[0, 1000]`.
	fn cancel_item_attributes_approval(n: u32, ) -> Weight {
		// Minimum execution time: 37_217 nanoseconds.
		Weight::from_ref_time(37_692_000)
			// Standard Error: 7_804
			.saturating_add(Weight::from_ref_time(7_344_173).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(n.into())))
	}
	// Storage: Nfts Collection (r:1 w:1)
	// Storage: Nfts ItemConfigOf (r:1 w:0)
	// Storage: Nfts CollectionConfigOf (r:1 w:0)
	// Storage: Nfts ItemMetadataOf (r:1 w:1)
	fn set_metadata() -> Weight {
		// Minimum execution time: 47_675 nanoseconds.
		Weight::from_ref_time(48_282_000)
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: Nfts Collection (r:1 w:1)
	// Storage: Nfts ItemConfigOf (r:1 w:0)
	// Storage: Nfts ItemMetadataOf (r:1 w:1)
	fn clear_metadata() -> Weight {
		// Minimum execution time: 46_062 nanoseconds.
		Weight::from_ref_time(46_854_000)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: Nfts CollectionConfigOf (r:1 w:0)
	// Storage: Nfts Collection (r:1 w:1)
	// Storage: Nfts CollectionMetadataOf (r:1 w:1)
	fn set_collection_metadata() -> Weight {
		// Minimum execution time: 43_847 nanoseconds.
		Weight::from_ref_time(44_792_000)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: Nfts Collection (r:1 w:0)
	// Storage: Nfts CollectionConfigOf (r:1 w:0)
	// Storage: Nfts CollectionMetadataOf (r:1 w:1)
	fn clear_collection_metadata() -> Weight {
		// Minimum execution time: 42_403 nanoseconds.
		Weight::from_ref_time(42_811_000)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Nfts Item (r:1 w:1)
	// Storage: Nfts CollectionConfigOf (r:1 w:0)
	// Storage: Nfts CollectionRoleOf (r:1 w:0)
	fn approve_transfer() -> Weight {
		// Minimum execution time: 34_880 nanoseconds.
		Weight::from_ref_time(35_737_000)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Nfts Item (r:1 w:1)
	// Storage: Nfts CollectionRoleOf (r:1 w:0)
	fn cancel_approval() -> Weight {
		// Minimum execution time: 31_606 nanoseconds.
		Weight::from_ref_time(32_339_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Nfts Item (r:1 w:1)
	// Storage: Nfts CollectionRoleOf (r:1 w:0)
	fn clear_all_transfer_approvals() -> Weight {
		// Minimum execution time: 30_626 nanoseconds.
		Weight::from_ref_time(31_043_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Nfts OwnershipAcceptance (r:1 w:1)
	fn set_accept_ownership() -> Weight {
		// Minimum execution time: 27_276 nanoseconds.
		Weight::from_ref_time(28_016_000)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Nfts CollectionConfigOf (r:1 w:1)
	// Storage: Nfts Collection (r:1 w:0)
	fn set_collection_max_supply() -> Weight {
		// Minimum execution time: 28_366 nanoseconds.
		Weight::from_ref_time(28_719_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Nfts Collection (r:1 w:0)
	// Storage: Nfts CollectionConfigOf (r:1 w:1)
	fn update_mint_settings() -> Weight {
		// Minimum execution time: 27_292 nanoseconds.
		Weight::from_ref_time(27_614_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Nfts Item (r:1 w:0)
	// Storage: Nfts CollectionConfigOf (r:1 w:0)
	// Storage: Nfts ItemConfigOf (r:1 w:0)
	// Storage: Nfts ItemPriceOf (r:0 w:1)
	fn set_price() -> Weight {
		// Minimum execution time: 34_133 nanoseconds.
		Weight::from_ref_time(34_510_000)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Nfts Item (r:1 w:1)
	// Storage: Nfts ItemPriceOf (r:1 w:1)
	// Storage: Nfts Collection (r:1 w:0)
	// Storage: Nfts CollectionConfigOf (r:1 w:0)
	// Storage: Nfts ItemConfigOf (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: Nfts Account (r:0 w:2)
	// Storage: Nfts PendingSwapOf (r:0 w:1)
	fn buy_item() -> Weight {
		// Minimum execution time: 69_501 nanoseconds.
		Weight::from_ref_time(70_342_000)
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	/// The range of component `n` is `[0, 10]`.
	fn pay_tips(n: u32, ) -> Weight {
		// Minimum execution time: 4_754 nanoseconds.
		Weight::from_ref_time(11_356_736)
			// Standard Error: 38_352
			.saturating_add(Weight::from_ref_time(3_427_961).saturating_mul(n.into()))
	}
	// Storage: Nfts Item (r:2 w:0)
	// Storage: Nfts PendingSwapOf (r:0 w:1)
	fn create_swap() -> Weight {
		// Minimum execution time: 31_371 nanoseconds.
		Weight::from_ref_time(32_227_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Nfts PendingSwapOf (r:1 w:1)
	// Storage: Nfts Item (r:1 w:0)
	fn cancel_swap() -> Weight {
		// Minimum execution time: 34_114 nanoseconds.
		Weight::from_ref_time(34_779_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Nfts Item (r:2 w:2)
	// Storage: Nfts PendingSwapOf (r:1 w:2)
	// Storage: Nfts Collection (r:1 w:0)
	// Storage: Nfts CollectionConfigOf (r:1 w:0)
	// Storage: Nfts ItemConfigOf (r:2 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: Nfts Account (r:0 w:4)
	// Storage: Nfts ItemPriceOf (r:0 w:2)
	fn claim_swap() -> Weight {
		// Minimum execution time: 97_965 nanoseconds.
		Weight::from_ref_time(98_699_000)
			.saturating_add(T::DbWeight::get().reads(8))
			.saturating_add(T::DbWeight::get().writes(11))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: Nfts NextCollectionId (r:1 w:1)
	// Storage: Nfts Collection (r:1 w:1)
	// Storage: Nfts CollectionRoleOf (r:0 w:1)
	// Storage: Nfts CollectionConfigOf (r:0 w:1)
	// Storage: Nfts CollectionAccount (r:0 w:1)
	fn create() -> Weight {
		// Minimum execution time: 42_075 nanoseconds.
		Weight::from_ref_time(42_614_000)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(5))
	}
	// Storage: Nfts NextCollectionId (r:1 w:1)
	// Storage: Nfts Collection (r:1 w:1)
	// Storage: Nfts CollectionRoleOf (r:0 w:1)
	// Storage: Nfts CollectionConfigOf (r:0 w:1)
	// Storage: Nfts CollectionAccount (r:0 w:1)
	fn force_create() -> Weight {
		// Minimum execution time: 29_799 nanoseconds.
		Weight::from_ref_time(30_511_000)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(5))
	}
	// Storage: Nfts Collection (r:1 w:1)
	// Storage: Nfts Item (r:1 w:0)
	// Storage: Nfts Attribute (r:1 w:0)
	// Storage: Nfts CollectionRoleOf (r:0 w:1)
	// Storage: Nfts CollectionMetadataOf (r:0 w:1)
	// Storage: Nfts CollectionConfigOf (r:0 w:1)
	// Storage: Nfts CollectionAccount (r:0 w:1)
	// Storage: Nfts ItemMetadataOf (r:0 w:20)
	// Storage: Nfts ItemConfigOf (r:0 w:20)
	// Storage: Nfts Account (r:0 w:20)
	/// The range of component `n` is `[0, 1000]`.
	/// The range of component `m` is `[0, 1000]`.
	/// The range of component `a` is `[0, 1000]`.
	fn destroy(n: u32, m: u32, a: u32, ) -> Weight {
		// Minimum execution time: 65_846 nanoseconds.
		Weight::from_ref_time(66_082_000)
			// Standard Error: 27_878
			.saturating_add(Weight::from_ref_time(26_747_590).saturating_mul(n.into()))
			// Standard Error: 27_329
			.saturating_add(Weight::from_ref_time(315_839 as u64).saturating_mul(m.into()))
			// Standard Error: 27_329
			.saturating_add(Weight::from_ref_time(217_497 as u64).saturating_mul(a.into()))
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(n.into())))
			.saturating_add(RocksDbWeight::get().writes(5))
			.saturating_add(RocksDbWeight::get().writes((5_u64).saturating_mul(n.into())))
	}
	// Storage: Nfts CollectionConfigOf (r:1 w:0)
	// Storage: Nfts Item (r:1 w:1)
	// Storage: Nfts Collection (r:1 w:1)
	// Storage: Nfts CollectionRoleOf (r:1 w:0)
	// Storage: Nfts ItemConfigOf (r:1 w:1)
	// Storage: Nfts Account (r:0 w:1)
	fn mint() -> Weight {
		// Minimum execution time: 58_577 nanoseconds.
		Weight::from_ref_time(59_058_000)
			.saturating_add(RocksDbWeight::get().reads(5))
			.saturating_add(RocksDbWeight::get().writes(4))
	}
	// Storage: Nfts CollectionRoleOf (r:1 w:0)
	// Storage: Nfts Item (r:1 w:1)
	// Storage: Nfts Collection (r:1 w:1)
	// Storage: Nfts CollectionConfigOf (r:1 w:0)
	// Storage: Nfts ItemConfigOf (r:1 w:1)
	// Storage: Nfts Account (r:0 w:1)
	fn force_mint() -> Weight {
		// Minimum execution time: 56_494 nanoseconds.
		Weight::from_ref_time(57_565_000)
			.saturating_add(RocksDbWeight::get().reads(5))
			.saturating_add(RocksDbWeight::get().writes(4))
	}
	// Storage: Nfts Collection (r:1 w:1)
	// Storage: Nfts Item (r:1 w:1)
	// Storage: Nfts CollectionRoleOf (r:1 w:0)
	// Storage: Nfts ItemConfigOf (r:1 w:1)
	// Storage: Nfts Account (r:0 w:1)
	// Storage: Nfts ItemPriceOf (r:0 w:1)
	// Storage: Nfts ItemAttributesApprovalsOf (r:0 w:1)
	// Storage: Nfts PendingSwapOf (r:0 w:1)
	fn burn() -> Weight {
		// Minimum execution time: 59_393 nanoseconds.
		Weight::from_ref_time(60_562_000)
			.saturating_add(RocksDbWeight::get().reads(4))
			.saturating_add(RocksDbWeight::get().writes(7))
	}
	// Storage: Nfts Collection (r:1 w:0)
	// Storage: Nfts CollectionConfigOf (r:1 w:0)
	// Storage: Nfts ItemConfigOf (r:1 w:0)
	// Storage: Nfts Item (r:1 w:1)
	// Storage: Nfts CollectionRoleOf (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: Nfts Account (r:0 w:2)
	// Storage: Nfts ItemPriceOf (r:0 w:1)
	// Storage: Nfts PendingSwapOf (r:0 w:1)
	fn transfer() -> Weight {
		// Minimum execution time: 65_852 nanoseconds.
		Weight::from_ref_time(66_308_000)
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(6))
	}
	// Storage: Nfts Collection (r:1 w:0)
	// Storage: Nfts CollectionConfigOf (r:1 w:0)
	// Storage: Nfts Item (r:102 w:102)
	/// The range of component `i` is `[0, 5000]`.
	fn redeposit(i: u32, ) -> Weight {
		// Minimum execution time: 25_795 nanoseconds.
		Weight::from_ref_time(26_128_000)
			// Standard Error: 10_295
			.saturating_add(Weight::from_ref_time(11_202_286).saturating_mul(i.into()))
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(i.into())))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(i.into())))
	}
	// Storage: Nfts CollectionRoleOf (r:1 w:0)
	// Storage: Nfts ItemConfigOf (r:1 w:1)
	fn lock_item_transfer() -> Weight {
		// Minimum execution time: 29_090 nanoseconds.
		Weight::from_ref_time(29_772_000)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: Nfts CollectionRoleOf (r:1 w:0)
	// Storage: Nfts ItemConfigOf (r:1 w:1)
	fn unlock_item_transfer() -> Weight {
		// Minimum execution time: 28_947 nanoseconds.
		Weight::from_ref_time(29_559_000)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: Nfts CollectionRoleOf (r:1 w:0)
	// Storage: Nfts CollectionConfigOf (r:1 w:1)
	fn lock_collection() -> Weight {
		// Minimum execution time: 26_972 nanoseconds.
		Weight::from_ref_time(27_803_000)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: Nfts OwnershipAcceptance (r:1 w:1)
	// Storage: Nfts Collection (r:1 w:1)
	// Storage: Nfts CollectionAccount (r:0 w:2)
	fn transfer_ownership() -> Weight {
		// Minimum execution time: 32_165 nanoseconds.
		Weight::from_ref_time(32_926_000)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(4))
	}
	// Storage: Nfts Collection (r:1 w:1)
	// Storage: Nfts CollectionRoleOf (r:0 w:4)
	fn set_team() -> Weight {
		// Minimum execution time: 35_375 nanoseconds.
		Weight::from_ref_time(35_950_000)
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(5))
	}
	// Storage: Nfts Collection (r:1 w:1)
	// Storage: Nfts CollectionAccount (r:0 w:2)
	fn force_collection_owner() -> Weight {
		// Minimum execution time: 27_470 nanoseconds.
		Weight::from_ref_time(27_855_000)
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: Nfts Collection (r:1 w:0)
	// Storage: Nfts CollectionConfigOf (r:0 w:1)
	fn force_collection_config() -> Weight {
		// Minimum execution time: 23_990 nanoseconds.
		Weight::from_ref_time(24_347_000)
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: Nfts Collection (r:1 w:0)
	// Storage: Nfts ItemConfigOf (r:1 w:1)
	fn lock_item_properties() -> Weight {
		// Minimum execution time: 28_481 nanoseconds.
		Weight::from_ref_time(28_929_000)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: Nfts Collection (r:1 w:1)
	// Storage: Nfts CollectionConfigOf (r:1 w:0)
	// Storage: Nfts ItemConfigOf (r:1 w:0)
	// Storage: Nfts Attribute (r:1 w:1)
	fn set_attribute() -> Weight {
		// Minimum execution time: 54_435 nanoseconds.
		Weight::from_ref_time(55_237_000)
			.saturating_add(RocksDbWeight::get().reads(4))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	// Storage: Nfts Collection (r:1 w:1)
	// Storage: Nfts Attribute (r:1 w:1)
	fn force_set_attribute() -> Weight {
		// Minimum execution time: 35_254 nanoseconds.
		Weight::from_ref_time(35_941_000)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	// Storage: Nfts Attribute (r:1 w:1)
	// Storage: Nfts Collection (r:1 w:1)
	// Storage: Nfts ItemConfigOf (r:1 w:0)
	fn clear_attribute() -> Weight {
		// Minimum execution time: 51_483 nanoseconds.
		Weight::from_ref_time(52_915_000)
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	// Storage: Nfts Item (r:1 w:0)
	// Storage: Nfts ItemAttributesApprovalsOf (r:1 w:1)
	fn approve_item_attributes() -> Weight {
		// Minimum execution time: 27_929 nanoseconds.
		Weight::from_ref_time(28_329_000)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: Nfts Item (r:1 w:0)
	// Storage: Nfts ItemAttributesApprovalsOf (r:1 w:1)
	// Storage: Nfts Attribute (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	/// The range of component `n` is `[0, 1000]`.
	fn cancel_item_attributes_approval(n: u32, ) -> Weight {
		// Minimum execution time: 37_217 nanoseconds.
		Weight::from_ref_time(37_692_000)
			// Standard Error: 7_804
			.saturating_add(Weight::from_ref_time(7_344_173).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(4))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(RocksDbWeight::get().writes(2))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(n.into())))
	}
	// Storage: Nfts Collection (r:1 w:1)
	// Storage: Nfts ItemConfigOf (r:1 w:0)
	// Storage: Nfts CollectionConfigOf (r:1 w:0)
	// Storage: Nfts ItemMetadataOf (r:1 w:1)
	fn set_metadata() -> Weight {
		// Minimum execution time: 47_675 nanoseconds.
		Weight::from_ref_time(48_282_000)
			.saturating_add(RocksDbWeight::get().reads(4))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	// Storage: Nfts Collection (r:1 w:1)
	// Storage: Nfts ItemConfigOf (r:1 w:0)
	// Storage: Nfts ItemMetadataOf (r:1 w:1)
	fn clear_metadata() -> Weight {
		// Minimum execution time: 46_062 nanoseconds.
		Weight::from_ref_time(46_854_000)
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	// Storage: Nfts CollectionConfigOf (r:1 w:0)
	// Storage: Nfts Collection (r:1 w:1)
	// Storage: Nfts CollectionMetadataOf (r:1 w:1)
	fn set_collection_metadata() -> Weight {
		// Minimum execution time: 43_847 nanoseconds.
		Weight::from_ref_time(44_792_000)
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	// Storage: Nfts Collection (r:1 w:0)
	// Storage: Nfts CollectionConfigOf (r:1 w:0)
	// Storage: Nfts CollectionMetadataOf (r:1 w:1)
	fn clear_collection_metadata() -> Weight {
		// Minimum execution time: 42_403 nanoseconds.
		Weight::from_ref_time(42_811_000)
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: Nfts Item (r:1 w:1)
	// Storage: Nfts CollectionConfigOf (r:1 w:0)
	// Storage: Nfts CollectionRoleOf (r:1 w:0)
	fn approve_transfer() -> Weight {
		// Minimum execution time: 34_880 nanoseconds.
		Weight::from_ref_time(35_737_000)
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: Nfts Item (r:1 w:1)
	// Storage: Nfts CollectionRoleOf (r:1 w:0)
	fn cancel_approval() -> Weight {
		// Minimum execution time: 31_606 nanoseconds.
		Weight::from_ref_time(32_339_000)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: Nfts Item (r:1 w:1)
	// Storage: Nfts CollectionRoleOf (r:1 w:0)
	fn clear_all_transfer_approvals() -> Weight {
		// Minimum execution time: 30_626 nanoseconds.
		Weight::from_ref_time(31_043_000)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: Nfts OwnershipAcceptance (r:1 w:1)
	fn set_accept_ownership() -> Weight {
		// Minimum execution time: 27_276 nanoseconds.
		Weight::from_ref_time(28_016_000)
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: Nfts CollectionConfigOf (r:1 w:1)
	// Storage: Nfts Collection (r:1 w:0)
	fn set_collection_max_supply() -> Weight {
		// Minimum execution time: 28_366 nanoseconds.
		Weight::from_ref_time(28_719_000)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: Nfts Collection (r:1 w:0)
	// Storage: Nfts CollectionConfigOf (r:1 w:1)
	fn update_mint_settings() -> Weight {
		// Minimum execution time: 27_292 nanoseconds.
		Weight::from_ref_time(27_614_000)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: Nfts Item (r:1 w:0)
	// Storage: Nfts CollectionConfigOf (r:1 w:0)
	// Storage: Nfts ItemConfigOf (r:1 w:0)
	// Storage: Nfts ItemPriceOf (r:0 w:1)
	fn set_price() -> Weight {
		// Minimum execution time: 34_133 nanoseconds.
		Weight::from_ref_time(34_510_000)
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: Nfts Item (r:1 w:1)
	// Storage: Nfts ItemPriceOf (r:1 w:1)
	// Storage: Nfts Collection (r:1 w:0)
	// Storage: Nfts CollectionConfigOf (r:1 w:0)
	// Storage: Nfts ItemConfigOf (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: Nfts Account (r:0 w:2)
	// Storage: Nfts PendingSwapOf (r:0 w:1)
	fn buy_item() -> Weight {
		// Minimum execution time: 69_501 nanoseconds.
		Weight::from_ref_time(70_342_000)
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(6))
	}
	/// The range of component `n` is `[0, 10]`.
	fn pay_tips(n: u32, ) -> Weight {
		// Minimum execution time: 4_754 nanoseconds.
		Weight::from_ref_time(11_356_736)
			// Standard Error: 38_352
			.saturating_add(Weight::from_ref_time(3_427_961).saturating_mul(n.into()))
	}
	// Storage: Nfts Item (r:2 w:0)
	// Storage: Nfts PendingSwapOf (r:0 w:1)
	fn create_swap() -> Weight {
		// Minimum execution time: 31_371 nanoseconds.
		Weight::from_ref_time(32_227_000)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: Nfts PendingSwapOf (r:1 w:1)
	// Storage: Nfts Item (r:1 w:0)
	fn cancel_swap() -> Weight {
		// Minimum execution time: 34_114 nanoseconds.
		Weight::from_ref_time(34_779_000)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: Nfts Item (r:2 w:2)
	// Storage: Nfts PendingSwapOf (r:1 w:2)
	// Storage: Nfts Collection (r:1 w:0)
	// Storage: Nfts CollectionConfigOf (r:1 w:0)
	// Storage: Nfts ItemConfigOf (r:2 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: Nfts Account (r:0 w:4)
	// Storage: Nfts ItemPriceOf (r:0 w:2)
	fn claim_swap() -> Weight {
		// Minimum execution time: 97_965 nanoseconds.
		Weight::from_ref_time(98_699_000)
			.saturating_add(RocksDbWeight::get().reads(8))
			.saturating_add(RocksDbWeight::get().writes(11))
	}
}
