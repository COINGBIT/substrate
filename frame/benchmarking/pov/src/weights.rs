
//! Autogenerated weights for frame_benchmarking_pallet_pov
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-12-20, STEPS: `50`, REPEAT: `2`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `oty-parity`, CPU: `11th Gen Intel(R) Core(TM) i7-1165G7 @ 2.80GHz`
//! EXECUTION: None, WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./target/release/substrate
// benchmark
// pallet
// --dev
// --pallet
// frame-benchmarking-pallet-pov
// --extrinsic
// 
// --steps
// 50
// --repeat
// 2
// --output
// frame/benchmarking/pov/src/weights.rs
// --template
// .maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for frame_benchmarking_pallet_pov.
pub trait WeightInfo {
	fn storage_single_value_read() -> Weight;
	fn storage_single_value_read_twice() -> Weight;
	fn storage_single_value_write() -> Weight;
	fn storage_single_value_kill() -> Weight;
	fn storage_1m_map_read_one_value_two_additional_layers() -> Weight;
	fn storage_1m_map_read_one_value_three_additional_layers() -> Weight;
	fn storage_1m_map_read_one_value_four_additional_layers() -> Weight;
	fn storage_map_read_per_component(n: u32, m: u32, ) -> Weight;
	fn storage_1m_map_one_entry_repeated_read(n: u32, ) -> Weight;
	fn storage_1m_map_multiple_entry_repeated_read(n: u32, ) -> Weight;
	fn storage_1m_double_map_read_per_component(n: u32, ) -> Weight;
	fn storage_value_bounded_read() -> Weight;
	fn storage_value_unbounded_read() -> Weight;
	fn storage_value_read_linear_size(l: u32, ) -> Weight;
	fn storage_value_bounded_and_unbounded_read() -> Weight;
	fn storage_map_unbounded_read() -> Weight;
	fn emit_event() -> Weight;
	fn noop() -> Weight;
}

/// Weights for frame_benchmarking_pallet_pov using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: Pov Value (r:1 w:0)
	/// Proof: Pov Value (max_values: Some(1), max_size: Some(4), added: 499)
	fn storage_single_value_read() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `136`
		//  Estimated: `631`
		// Minimum execution time: 2_882 nanoseconds.
		Weight::from_parts(3_444_000, 631)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: Pov Value (r:1 w:0)
	/// Proof: Pov Value (max_values: Some(1), max_size: Some(4), added: 499)
	fn storage_single_value_read_twice() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `136`
		//  Estimated: `631`
		// Minimum execution time: 3_007 nanoseconds.
		Weight::from_parts(3_495_000, 631)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: Pov Value (r:0 w:1)
	/// Proof: Pov Value (max_values: Some(1), max_size: Some(4), added: 499)
	fn storage_single_value_write() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 599 nanoseconds.
		Weight::from_ref_time(794_000)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Pov Value (r:0 w:1)
	/// Proof: Pov Value (max_values: Some(1), max_size: Some(4), added: 499)
	fn storage_single_value_kill() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 654 nanoseconds.
		Weight::from_ref_time(1_048_000)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Pov Map1M (r:1 w:0)
	/// Proof: Pov Map1M (max_values: Some(1000000), max_size: Some(36), added: 2511)
	fn storage_1m_map_read_one_value_two_additional_layers() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1275`
		//  Estimated: `3750`
		// Minimum execution time: 10_672 nanoseconds.
		Weight::from_parts(11_736_000, 3750)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: Pov Map1M (r:1 w:0)
	/// Proof: Pov Map1M (max_values: Some(1000000), max_size: Some(36), added: 2511)
	fn storage_1m_map_read_one_value_three_additional_layers() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1544`
		//  Estimated: `4019`
		// Minimum execution time: 13_888 nanoseconds.
		Weight::from_parts(15_935_000, 4019)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: Pov Map1M (r:1 w:0)
	/// Proof: Pov Map1M (max_values: Some(1000000), max_size: Some(36), added: 2511)
	fn storage_1m_map_read_one_value_four_additional_layers() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2044`
		//  Estimated: `4519`
		// Minimum execution time: 12_766 nanoseconds.
		Weight::from_parts(18_878_000, 4519)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: Pov Map1M (r:100 w:0)
	/// Proof: Pov Map1M (max_values: Some(1000000), max_size: Some(36), added: 2511)
	/// Storage: Pov Map16M (r:100 w:0)
	/// Proof: Pov Map16M (max_values: Some(16000000), max_size: Some(36), added: 3006)
	/// The range of component `n` is `[0, 100]`.
	/// The range of component `m` is `[0, 100]`.
	fn storage_map_read_per_component(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `515 + n * (188 ±0) + m * (188 ±0)`
		//  Estimated: `515 + n * (3158 ±0) + m * (2663 ±0)`
		// Minimum execution time: 269_029 nanoseconds.
		Weight::from_parts(212_431_087, 515)
			// Standard Error: 112_707
			.saturating_add(Weight::from_ref_time(924_267).saturating_mul(n.into()))
			// Standard Error: 112_707
			.saturating_add(Weight::from_ref_time(1_490_183).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(m.into())))
			.saturating_add(Weight::from_proof_size(3158).saturating_mul(n.into()))
			.saturating_add(Weight::from_proof_size(2663).saturating_mul(m.into()))
	}
	/// Storage: Pov Map1M (r:1 w:0)
	/// Proof: Pov Map1M (max_values: Some(1000000), max_size: Some(36), added: 2511)
	/// The range of component `n` is `[0, 100]`.
	fn storage_1m_map_one_entry_repeated_read(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `170`
		//  Estimated: `2645`
		// Minimum execution time: 57 nanoseconds.
		Weight::from_parts(57_000, 2645)
			// Standard Error: 14_840
			.saturating_add(Weight::from_ref_time(580_889).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: Pov Map1M (r:100 w:0)
	/// Proof: Pov Map1M (max_values: Some(1000000), max_size: Some(36), added: 2511)
	/// The range of component `n` is `[0, 100]`.
	fn storage_1m_map_multiple_entry_repeated_read(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `147 + n * (40 ±0)`
		//  Estimated: `147 + n * (2515 ±0)`
		// Minimum execution time: 58 nanoseconds.
		Weight::from_parts(46_009_870, 147)
			// Standard Error: 156_779
			.saturating_add(Weight::from_ref_time(5_385_249).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_proof_size(2515).saturating_mul(n.into()))
	}
	/// Storage: Pov DoubleMap1M (r:1024 w:0)
	/// Proof: Pov DoubleMap1M (max_values: Some(1000000), max_size: Some(68), added: 2543)
	/// The range of component `n` is `[0, 1024]`.
	fn storage_1m_double_map_read_per_component(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `21938 + n * (57 ±0)`
		//  Estimated: `21938 + n * (2532 ±0)`
		// Minimum execution time: 267 nanoseconds.
		Weight::from_parts(64_652_228, 21938)
			// Standard Error: 78_933
			.saturating_add(Weight::from_ref_time(2_663_157).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_proof_size(2532).saturating_mul(n.into()))
	}
	/// Storage: Pov BoundedValue (r:1 w:0)
	/// Proof: Pov BoundedValue (max_values: Some(1), max_size: Some(33), added: 528)
	fn storage_value_bounded_read() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `604`
		// Minimum execution time: 1_942 nanoseconds.
		Weight::from_parts(2_321_000, 604)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: Pov UnboundedValue (r:1 w:0)
	/// Proof Skipped: Pov UnboundedValue (max_values: Some(1), max_size: None)
	fn storage_value_unbounded_read() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `604`
		// Minimum execution time: 1_842 nanoseconds.
		Weight::from_parts(2_243_000, 604)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: Pov LargeValue (r:1 w:0)
	/// Proof: Pov LargeValue (max_values: Some(1), max_size: Some(4194308), added: 4194803)
	/// The range of component `l` is `[0, 4194304]`.
	fn storage_value_read_linear_size(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `174 + l * (1 ±0)`
		//  Estimated: `669 + l * (1 ±0)`
		// Minimum execution time: 3_020 nanoseconds.
		Weight::from_parts(3_020_000, 669)
			// Standard Error: 3
			.saturating_add(Weight::from_ref_time(310).saturating_mul(l.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(Weight::from_proof_size(1).saturating_mul(l.into()))
	}
	/// Storage: Pov UnboundedValue (r:1 w:0)
	/// Proof Skipped: Pov UnboundedValue (max_values: Some(1), max_size: None)
	/// Storage: Pov BoundedValue (r:1 w:0)
	/// Proof: Pov BoundedValue (max_values: Some(1), max_size: Some(33), added: 528)
	fn storage_value_bounded_and_unbounded_read() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `1099`
		// Minimum execution time: 2_699 nanoseconds.
		Weight::from_parts(2_704_000, 1099)
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	/// Storage: Pov UnboundedMap (r:1 w:0)
	/// Proof Skipped: Pov UnboundedMap (max_values: None, max_size: None)
	fn storage_map_unbounded_read() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `2584`
		// Minimum execution time: 2_114 nanoseconds.
		Weight::from_parts(2_434_000, 2584)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	fn emit_event() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_647 nanoseconds.
		Weight::from_ref_time(6_634_000)
	}
	fn noop() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_605 nanoseconds.
		Weight::from_ref_time(2_733_000)
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: Pov Value (r:1 w:0)
	/// Proof: Pov Value (max_values: Some(1), max_size: Some(4), added: 499)
	fn storage_single_value_read() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `136`
		//  Estimated: `631`
		// Minimum execution time: 2_882 nanoseconds.
		Weight::from_parts(3_444_000, 631)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: Pov Value (r:1 w:0)
	/// Proof: Pov Value (max_values: Some(1), max_size: Some(4), added: 499)
	fn storage_single_value_read_twice() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `136`
		//  Estimated: `631`
		// Minimum execution time: 3_007 nanoseconds.
		Weight::from_parts(3_495_000, 631)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: Pov Value (r:0 w:1)
	/// Proof: Pov Value (max_values: Some(1), max_size: Some(4), added: 499)
	fn storage_single_value_write() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 599 nanoseconds.
		Weight::from_ref_time(794_000)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Pov Value (r:0 w:1)
	/// Proof: Pov Value (max_values: Some(1), max_size: Some(4), added: 499)
	fn storage_single_value_kill() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 654 nanoseconds.
		Weight::from_ref_time(1_048_000)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Pov Map1M (r:1 w:0)
	/// Proof: Pov Map1M (max_values: Some(1000000), max_size: Some(36), added: 2511)
	fn storage_1m_map_read_one_value_two_additional_layers() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1275`
		//  Estimated: `3750`
		// Minimum execution time: 10_672 nanoseconds.
		Weight::from_parts(11_736_000, 3750)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: Pov Map1M (r:1 w:0)
	/// Proof: Pov Map1M (max_values: Some(1000000), max_size: Some(36), added: 2511)
	fn storage_1m_map_read_one_value_three_additional_layers() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1544`
		//  Estimated: `4019`
		// Minimum execution time: 13_888 nanoseconds.
		Weight::from_parts(15_935_000, 4019)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: Pov Map1M (r:1 w:0)
	/// Proof: Pov Map1M (max_values: Some(1000000), max_size: Some(36), added: 2511)
	fn storage_1m_map_read_one_value_four_additional_layers() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2044`
		//  Estimated: `4519`
		// Minimum execution time: 12_766 nanoseconds.
		Weight::from_parts(18_878_000, 4519)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: Pov Map1M (r:100 w:0)
	/// Proof: Pov Map1M (max_values: Some(1000000), max_size: Some(36), added: 2511)
	/// Storage: Pov Map16M (r:100 w:0)
	/// Proof: Pov Map16M (max_values: Some(16000000), max_size: Some(36), added: 3006)
	/// The range of component `n` is `[0, 100]`.
	/// The range of component `m` is `[0, 100]`.
	fn storage_map_read_per_component(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `515 + n * (188 ±0) + m * (188 ±0)`
		//  Estimated: `515 + n * (3158 ±0) + m * (2663 ±0)`
		// Minimum execution time: 269_029 nanoseconds.
		Weight::from_parts(212_431_087, 515)
			// Standard Error: 112_707
			.saturating_add(Weight::from_ref_time(924_267).saturating_mul(n.into()))
			// Standard Error: 112_707
			.saturating_add(Weight::from_ref_time(1_490_183).saturating_mul(m.into()))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(m.into())))
			.saturating_add(Weight::from_proof_size(3158).saturating_mul(n.into()))
			.saturating_add(Weight::from_proof_size(2663).saturating_mul(m.into()))
	}
	/// Storage: Pov Map1M (r:1 w:0)
	/// Proof: Pov Map1M (max_values: Some(1000000), max_size: Some(36), added: 2511)
	/// The range of component `n` is `[0, 100]`.
	fn storage_1m_map_one_entry_repeated_read(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `170`
		//  Estimated: `2645`
		// Minimum execution time: 57 nanoseconds.
		Weight::from_parts(57_000, 2645)
			// Standard Error: 14_840
			.saturating_add(Weight::from_ref_time(580_889).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: Pov Map1M (r:100 w:0)
	/// Proof: Pov Map1M (max_values: Some(1000000), max_size: Some(36), added: 2511)
	/// The range of component `n` is `[0, 100]`.
	fn storage_1m_map_multiple_entry_repeated_read(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `147 + n * (40 ±0)`
		//  Estimated: `147 + n * (2515 ±0)`
		// Minimum execution time: 58 nanoseconds.
		Weight::from_parts(46_009_870, 147)
			// Standard Error: 156_779
			.saturating_add(Weight::from_ref_time(5_385_249).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_proof_size(2515).saturating_mul(n.into()))
	}
	/// Storage: Pov DoubleMap1M (r:1024 w:0)
	/// Proof: Pov DoubleMap1M (max_values: Some(1000000), max_size: Some(68), added: 2543)
	/// The range of component `n` is `[0, 1024]`.
	fn storage_1m_double_map_read_per_component(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `21938 + n * (57 ±0)`
		//  Estimated: `21938 + n * (2532 ±0)`
		// Minimum execution time: 267 nanoseconds.
		Weight::from_parts(64_652_228, 21938)
			// Standard Error: 78_933
			.saturating_add(Weight::from_ref_time(2_663_157).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_proof_size(2532).saturating_mul(n.into()))
	}
	/// Storage: Pov BoundedValue (r:1 w:0)
	/// Proof: Pov BoundedValue (max_values: Some(1), max_size: Some(33), added: 528)
	fn storage_value_bounded_read() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `604`
		// Minimum execution time: 1_942 nanoseconds.
		Weight::from_parts(2_321_000, 604)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: Pov UnboundedValue (r:1 w:0)
	/// Proof Skipped: Pov UnboundedValue (max_values: Some(1), max_size: None)
	fn storage_value_unbounded_read() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `604`
		// Minimum execution time: 1_842 nanoseconds.
		Weight::from_parts(2_243_000, 604)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: Pov LargeValue (r:1 w:0)
	/// Proof: Pov LargeValue (max_values: Some(1), max_size: Some(4194308), added: 4194803)
	/// The range of component `l` is `[0, 4194304]`.
	fn storage_value_read_linear_size(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `174 + l * (1 ±0)`
		//  Estimated: `669 + l * (1 ±0)`
		// Minimum execution time: 3_020 nanoseconds.
		Weight::from_parts(3_020_000, 669)
			// Standard Error: 3
			.saturating_add(Weight::from_ref_time(310).saturating_mul(l.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(Weight::from_proof_size(1).saturating_mul(l.into()))
	}
	/// Storage: Pov UnboundedValue (r:1 w:0)
	/// Proof Skipped: Pov UnboundedValue (max_values: Some(1), max_size: None)
	/// Storage: Pov BoundedValue (r:1 w:0)
	/// Proof: Pov BoundedValue (max_values: Some(1), max_size: Some(33), added: 528)
	fn storage_value_bounded_and_unbounded_read() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `1099`
		// Minimum execution time: 2_699 nanoseconds.
		Weight::from_parts(2_704_000, 1099)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
	}
	/// Storage: Pov UnboundedMap (r:1 w:0)
	/// Proof Skipped: Pov UnboundedMap (max_values: None, max_size: None)
	fn storage_map_unbounded_read() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `2584`
		// Minimum execution time: 2_114 nanoseconds.
		Weight::from_parts(2_434_000, 2584)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	fn emit_event() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_647 nanoseconds.
		Weight::from_ref_time(6_634_000)
	}
	fn noop() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_605 nanoseconds.
		Weight::from_ref_time(2_733_000)
	}
}
